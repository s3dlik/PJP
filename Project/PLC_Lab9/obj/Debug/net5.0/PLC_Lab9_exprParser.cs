//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\git\PJP\Project\PLC_Lab9\PLC_Lab9_expr.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PLC_Lab9 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class PLC_Lab9_exprParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, BOOL=33, INT=34, FLOAT=35, STRING=36, NULL=37, IDENTIFIER=38, 
		WS=39;
	public const int
		RULE_prog = 0, RULE_input = 1, RULE_statement = 2, RULE_declaration = 3, 
		RULE_assignment = 4, RULE_write = 5, RULE_fullSTRING = 6, RULE_read = 7, 
		RULE_ifStatement = 8, RULE_elseStatement = 9, RULE_whileStatement = 10, 
		RULE_block = 11, RULE_expression = 12, RULE_datatype = 13, RULE_comment = 14;
	public static readonly string[] ruleNames = {
		"prog", "input", "statement", "declaration", "assignment", "write", "fullSTRING", 
		"read", "ifStatement", "elseStatement", "whileStatement", "block", "expression", 
		"datatype", "comment"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'='", "'write'", "'read'", "'if'", "'expression'", 
		"'else'", "'while('", "')'", "'{'", "'}'", "'*'", "'/'", "'%'", "'+'", 
		"'-'", "'.'", "'('", "'>'", "'<'", "'=='", "'!='", "'||'", "'&&'", "'int'", 
		"'string'", "'float'", "'bool'", "'//'", "'\r'", "'\n'", null, null, null, 
		null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "BOOL", "INT", "FLOAT", 
		"STRING", "NULL", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PLC_Lab9_expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PLC_Lab9_exprParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public InputContext[] input() {
			return GetRuleContexts<InputContext>();
		}
		public InputContext input(int i) {
			return GetRuleContext<InputContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__8) | (1L << T__18) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << BOOL) | (1L << INT) | (1L << FLOAT) | (1L << STRING) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 30; input();
				}
				}
				State = 35;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public WriteContext write() {
			return GetRuleContext<WriteContext>(0);
		}
		public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_input);
		try {
			State = 49;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__18:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case BOOL:
			case INT:
			case FLOAT:
			case STRING:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; statement();
				State = 37; Match(T__0);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39; ifStatement();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40; whileStatement();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 4);
				{
				State = 41; write();
				State = 42; Match(T__0);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 5);
				{
				State = 44; read();
				State = 45; Match(T__0);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 6);
				{
				State = 47; comment();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 7);
				{
				State = 48; Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 54;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51; declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; assignment();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 53; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(PLC_Lab9_exprParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(PLC_Lab9_exprParser.IDENTIFIER, i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; datatype();
			State = 57; Match(IDENTIFIER);
			State = 62;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 58; Match(T__1);
				State = 59; Match(IDENTIFIER);
				}
				}
				State = 64;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(PLC_Lab9_exprParser.IDENTIFIER, 0); }
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_assignment);
		try {
			State = 69;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66; Match(IDENTIFIER);
				State = 67; Match(T__2);
				State = 68; assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteContext : ParserRuleContext {
		public FullSTRINGContext[] fullSTRING() {
			return GetRuleContexts<FullSTRINGContext>();
		}
		public FullSTRINGContext fullSTRING(int i) {
			return GetRuleContext<FullSTRINGContext>(i);
		}
		public WriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterWrite(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitWrite(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteContext write() {
		WriteContext _localctx = new WriteContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_write);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(T__3);
			State = 73;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 72; fullSTRING();
				}
				}
				State = 75;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullSTRINGContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(PLC_Lab9_exprParser.STRING, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FullSTRINGContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullSTRING; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterFullSTRING(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitFullSTRING(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullSTRING(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullSTRINGContext fullSTRING() {
		FullSTRINGContext _localctx = new FullSTRINGContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_fullSTRING);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(STRING);
			State = 84;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 78; Match(T__1);
					State = 79; expression(0);
					State = 80; Match(T__1);
					}
					} 
				}
				State = 86;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			State = 91;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 87; Match(T__1);
				State = 88; expression(0);
				}
				}
				State = 93;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(PLC_Lab9_exprParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(PLC_Lab9_exprParser.IDENTIFIER, i);
		}
		public ReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadContext read() {
		ReadContext _localctx = new ReadContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_read);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(T__4);
			State = 95; Match(IDENTIFIER);
			State = 100;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 96; Match(T__1);
				State = 97; Match(IDENTIFIER);
				}
				}
				State = 102;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseStatementContext[] elseStatement() {
			return GetRuleContexts<ElseStatementContext>();
		}
		public ElseStatementContext elseStatement(int i) {
			return GetRuleContext<ElseStatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(T__5);
			{
			State = 104; Match(T__6);
			}
			State = 105; block();
			State = 110;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 106; Match(T__7);
					State = 107; elseStatement();
					}
					} 
				}
				State = 112;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_elseStatement);
		try {
			State = 115;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113; block();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114; ifStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(T__8);
			State = 118; expression(0);
			State = 119; Match(T__9);
			State = 120; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public InputContext[] input() {
			return GetRuleContexts<InputContext>();
		}
		public InputContext input(int i) {
			return GetRuleContext<InputContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_block);
		int _la;
		try {
			State = 131;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__0:
			case T__3:
			case T__4:
			case T__5:
			case T__8:
			case T__18:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case BOOL:
			case INT:
			case FLOAT:
			case STRING:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122; input();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123; Match(T__10);
				State = 125;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 124; input();
					}
					}
					State = 127;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__8) | (1L << T__18) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << BOOL) | (1L << INT) | (1L << FLOAT) | (1L << STRING) | (1L << IDENTIFIER))) != 0) );
				State = 129; Match(T__11);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterPar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitPar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolOperContext : ExpressionContext {
		public IToken boolOper;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BoolOperContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterBoolOper(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitBoolOper(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOper(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareContext : ExpressionContext {
		public IToken compare;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompareContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : ExpressionContext {
		public ITerminalNode BOOL() { return GetToken(PLC_Lab9_exprParser.BOOL, 0); }
		public BoolContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExpressionContext {
		public ITerminalNode STRING() { return GetToken(PLC_Lab9_exprParser.STRING, 0); }
		public StringContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MulContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatContext : ExpressionContext {
		public ITerminalNode[] STRING() { return GetTokens(PLC_Lab9_exprParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(PLC_Lab9_exprParser.STRING, i);
		}
		public ConcatContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterConcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitConcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExpressionContext {
		public ITerminalNode FLOAT() { return GetToken(PLC_Lab9_exprParser.FLOAT, 0); }
		public FloatContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(PLC_Lab9_exprParser.INT, 0); }
		public IntContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExprContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(PLC_Lab9_exprParser.IDENTIFIER, 0); }
		public IdentifierExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterIdentifierExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitIdentifierExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				_localctx = new IntContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 134; Match(INT);
				}
				break;

			case 2:
				{
				_localctx = new FloatContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 135; Match(FLOAT);
				}
				break;

			case 3:
				{
				_localctx = new BoolContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 136; Match(BOOL);
				}
				break;

			case 4:
				{
				_localctx = new StringContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 137; Match(STRING);
				}
				break;

			case 5:
				{
				_localctx = new IdentifierExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 138; Match(IDENTIFIER);
				}
				break;

			case 6:
				{
				_localctx = new ConcatContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 139; Match(STRING);
				{
				State = 140; Match(T__17);
				}
				State = 141; Match(STRING);
				}
				break;

			case 7:
				{
				_localctx = new ParContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 142; Match(T__18);
				State = 143; expression(0);
				State = 144; Match(T__9);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 162;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 160;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
					case 1:
						{
						_localctx = new MulContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 148;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 149;
						((MulContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14))) != 0)) ) {
							((MulContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 150; expression(7);
						}
						break;

					case 2:
						{
						_localctx = new AddContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 151;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 152;
						((AddContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__15 || _la==T__16) ) {
							((AddContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 153; expression(6);
						}
						break;

					case 3:
						{
						_localctx = new CompareContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 154;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 155;
						((CompareContext)_localctx).compare = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) ) {
							((CompareContext)_localctx).compare = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 156; expression(3);
						}
						break;

					case 4:
						{
						_localctx = new BoolOperContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 157;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 158;
						((BoolOperContext)_localctx).boolOper = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__23 || _la==T__24) ) {
							((BoolOperContext)_localctx).boolOper = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 159; expression(2);
						}
						break;
					}
					} 
				}
				State = 164;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitDatatype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_datatype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_comment);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(T__29);
			State = 171;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 168;
					_la = _input.La(1);
					if ( _la <= 0 || (_la==T__30 || _la==T__31) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					} 
				}
				State = 173;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 6);

		case 1: return Precpred(_ctx, 5);

		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3)\xB1\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x3\x2\a\x2\"\n\x2\f\x2\xE\x2%\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x34\n\x3\x3\x4"+
		"\x3\x4\x3\x4\x5\x4\x39\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\a\x5?\n\x5\f\x5\xE"+
		"\x5\x42\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6H\n\x6\x3\a\x3\a\x6\aL\n\a\r"+
		"\a\xE\aM\x3\b\x3\b\x3\b\x3\b\x3\b\a\bU\n\b\f\b\xE\bX\v\b\x3\b\x3\b\a\b"+
		"\\\n\b\f\b\xE\b_\v\b\x3\t\x3\t\x3\t\x3\t\a\t\x65\n\t\f\t\xE\th\v\t\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\a\no\n\n\f\n\xE\nr\v\n\x3\v\x3\v\x5\vv\n\v\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x6\r\x80\n\r\r\r\xE\r\x81\x3\r\x3"+
		"\r\x5\r\x86\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x95\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\xA3\n\xE\f\xE\xE\xE\xA6"+
		"\v\xE\x3\xF\x3\xF\x3\x10\x3\x10\a\x10\xAC\n\x10\f\x10\xE\x10\xAF\v\x10"+
		"\x3\x10\x2\x2\x3\x1A\x11\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2"+
		"\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2\x2\b\x3\x2\xF\x11\x3"+
		"\x2\x12\x13\x3\x2\x16\x19\x3\x2\x1A\x1B\x3\x2\x1C\x1F\x3\x2!\"\xBF\x2"+
		"#\x3\x2\x2\x2\x4\x33\x3\x2\x2\x2\x6\x38\x3\x2\x2\x2\b:\x3\x2\x2\x2\nG"+
		"\x3\x2\x2\x2\fI\x3\x2\x2\x2\xEO\x3\x2\x2\x2\x10`\x3\x2\x2\x2\x12i\x3\x2"+
		"\x2\x2\x14u\x3\x2\x2\x2\x16w\x3\x2\x2\x2\x18\x85\x3\x2\x2\x2\x1A\x94\x3"+
		"\x2\x2\x2\x1C\xA7\x3\x2\x2\x2\x1E\xA9\x3\x2\x2\x2 \"\x5\x4\x3\x2! \x3"+
		"\x2\x2\x2\"%\x3\x2\x2\x2#!\x3\x2\x2\x2#$\x3\x2\x2\x2$\x3\x3\x2\x2\x2%"+
		"#\x3\x2\x2\x2&\'\x5\x6\x4\x2\'(\a\x3\x2\x2(\x34\x3\x2\x2\x2)\x34\x5\x12"+
		"\n\x2*\x34\x5\x16\f\x2+,\x5\f\a\x2,-\a\x3\x2\x2-\x34\x3\x2\x2\x2./\x5"+
		"\x10\t\x2/\x30\a\x3\x2\x2\x30\x34\x3\x2\x2\x2\x31\x34\x5\x1E\x10\x2\x32"+
		"\x34\a\x3\x2\x2\x33&\x3\x2\x2\x2\x33)\x3\x2\x2\x2\x33*\x3\x2\x2\x2\x33"+
		"+\x3\x2\x2\x2\x33.\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x33\x32\x3\x2\x2\x2"+
		"\x34\x5\x3\x2\x2\x2\x35\x39\x5\b\x5\x2\x36\x39\x5\n\x6\x2\x37\x39\x5\x1A"+
		"\xE\x2\x38\x35\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38\x37\x3\x2\x2\x2\x39"+
		"\a\x3\x2\x2\x2:;\x5\x1C\xF\x2;@\a(\x2\x2<=\a\x4\x2\x2=?\a(\x2\x2><\x3"+
		"\x2\x2\x2?\x42\x3\x2\x2\x2@>\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41\t\x3\x2"+
		"\x2\x2\x42@\x3\x2\x2\x2\x43H\x5\x1A\xE\x2\x44\x45\a(\x2\x2\x45\x46\a\x5"+
		"\x2\x2\x46H\x5\n\x6\x2G\x43\x3\x2\x2\x2G\x44\x3\x2\x2\x2H\v\x3\x2\x2\x2"+
		"IK\a\x6\x2\x2JL\x5\xE\b\x2KJ\x3\x2\x2\x2LM\x3\x2\x2\x2MK\x3\x2\x2\x2M"+
		"N\x3\x2\x2\x2N\r\x3\x2\x2\x2OV\a&\x2\x2PQ\a\x4\x2\x2QR\x5\x1A\xE\x2RS"+
		"\a\x4\x2\x2SU\x3\x2\x2\x2TP\x3\x2\x2\x2UX\x3\x2\x2\x2VT\x3\x2\x2\x2VW"+
		"\x3\x2\x2\x2W]\x3\x2\x2\x2XV\x3\x2\x2\x2YZ\a\x4\x2\x2Z\\\x5\x1A\xE\x2"+
		"[Y\x3\x2\x2\x2\\_\x3\x2\x2\x2][\x3\x2\x2\x2]^\x3\x2\x2\x2^\xF\x3\x2\x2"+
		"\x2_]\x3\x2\x2\x2`\x61\a\a\x2\x2\x61\x66\a(\x2\x2\x62\x63\a\x4\x2\x2\x63"+
		"\x65\a(\x2\x2\x64\x62\x3\x2\x2\x2\x65h\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2"+
		"\x66g\x3\x2\x2\x2g\x11\x3\x2\x2\x2h\x66\x3\x2\x2\x2ij\a\b\x2\x2jk\a\t"+
		"\x2\x2kp\x5\x18\r\x2lm\a\n\x2\x2mo\x5\x14\v\x2nl\x3\x2\x2\x2or\x3\x2\x2"+
		"\x2pn\x3\x2\x2\x2pq\x3\x2\x2\x2q\x13\x3\x2\x2\x2rp\x3\x2\x2\x2sv\x5\x18"+
		"\r\x2tv\x5\x12\n\x2us\x3\x2\x2\x2ut\x3\x2\x2\x2v\x15\x3\x2\x2\x2wx\a\v"+
		"\x2\x2xy\x5\x1A\xE\x2yz\a\f\x2\x2z{\x5\x18\r\x2{\x17\x3\x2\x2\x2|\x86"+
		"\x5\x4\x3\x2}\x7F\a\r\x2\x2~\x80\x5\x4\x3\x2\x7F~\x3\x2\x2\x2\x80\x81"+
		"\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2\x82\x83\x3\x2\x2"+
		"\x2\x83\x84\a\xE\x2\x2\x84\x86\x3\x2\x2\x2\x85|\x3\x2\x2\x2\x85}\x3\x2"+
		"\x2\x2\x86\x19\x3\x2\x2\x2\x87\x88\b\xE\x1\x2\x88\x95\a$\x2\x2\x89\x95"+
		"\a%\x2\x2\x8A\x95\a#\x2\x2\x8B\x95\a&\x2\x2\x8C\x95\a(\x2\x2\x8D\x8E\a"+
		"&\x2\x2\x8E\x8F\a\x14\x2\x2\x8F\x95\a&\x2\x2\x90\x91\a\x15\x2\x2\x91\x92"+
		"\x5\x1A\xE\x2\x92\x93\a\f\x2\x2\x93\x95\x3\x2\x2\x2\x94\x87\x3\x2\x2\x2"+
		"\x94\x89\x3\x2\x2\x2\x94\x8A\x3\x2\x2\x2\x94\x8B\x3\x2\x2\x2\x94\x8C\x3"+
		"\x2\x2\x2\x94\x8D\x3\x2\x2\x2\x94\x90\x3\x2\x2\x2\x95\xA4\x3\x2\x2\x2"+
		"\x96\x97\f\b\x2\x2\x97\x98\t\x2\x2\x2\x98\xA3\x5\x1A\xE\t\x99\x9A\f\a"+
		"\x2\x2\x9A\x9B\t\x3\x2\x2\x9B\xA3\x5\x1A\xE\b\x9C\x9D\f\x4\x2\x2\x9D\x9E"+
		"\t\x4\x2\x2\x9E\xA3\x5\x1A\xE\x5\x9F\xA0\f\x3\x2\x2\xA0\xA1\t\x5\x2\x2"+
		"\xA1\xA3\x5\x1A\xE\x4\xA2\x96\x3\x2\x2\x2\xA2\x99\x3\x2\x2\x2\xA2\x9C"+
		"\x3\x2\x2\x2\xA2\x9F\x3\x2\x2\x2\xA3\xA6\x3\x2\x2\x2\xA4\xA2\x3\x2\x2"+
		"\x2\xA4\xA5\x3\x2\x2\x2\xA5\x1B\x3\x2\x2\x2\xA6\xA4\x3\x2\x2\x2\xA7\xA8"+
		"\t\x6\x2\x2\xA8\x1D\x3\x2\x2\x2\xA9\xAD\a \x2\x2\xAA\xAC\n\a\x2\x2\xAB"+
		"\xAA\x3\x2\x2\x2\xAC\xAF\x3\x2\x2\x2\xAD\xAB\x3\x2\x2\x2\xAD\xAE\x3\x2"+
		"\x2\x2\xAE\x1F\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\x13#\x33\x38@GMV]\x66p"+
		"u\x81\x85\x94\xA2\xA4\xAD";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PLC_Lab9
