//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\VYSOKA\6semestr\PJP\project\PLC_Lab9\PLC_Lab9_expr.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PLC_Lab9 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class PLC_Lab9_exprParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, BOOL=29, INTEGER=30, FLOAT=31, 
		STRING=32, NULL=33, IDENTIFIER=34, WS=35, INT=36;
	public const int
		RULE_prog = 0, RULE_input = 1, RULE_statement = 2, RULE_declaration = 3, 
		RULE_assignment = 4, RULE_write = 5, RULE_fullSTRING = 6, RULE_read = 7, 
		RULE_ifStatement = 8, RULE_elseStatement = 9, RULE_whileStatement = 10, 
		RULE_block = 11, RULE_expression = 12, RULE_constant = 13, RULE_datatype = 14;
	public static readonly string[] ruleNames = {
		"prog", "input", "statement", "declaration", "assignment", "write", "fullSTRING", 
		"read", "ifStatement", "elseStatement", "whileStatement", "block", "expression", 
		"constant", "datatype"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'='", "'write '", "'read'", "'if'", "'expression'", 
		"'else'", "'while('", "')'", "'{'", "'}'", "'*'", "'/'", "'%'", "'+'", 
		"'-'", "'('", "'>'", "'<'", "'=='", "'!='", "'||'", "'&&'", "'int'", "'string'", 
		"'float'", "'bool'", null, null, null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "BOOL", "INTEGER", "FLOAT", "STRING", "NULL", 
		"IDENTIFIER", "WS", "INT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PLC_Lab9_expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PLC_Lab9_exprParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public InputContext[] input() {
			return GetRuleContexts<InputContext>();
		}
		public InputContext input(int i) {
			return GetRuleContext<InputContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__8) | (1L << T__16) | (1L << T__17) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << BOOL) | (1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << NULL) | (1L << IDENTIFIER) | (1L << INT))) != 0)) {
				{
				{
				State = 30; input();
				}
				}
				State = 35;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public WriteContext write() {
			return GetRuleContext<WriteContext>(0);
		}
		public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_input);
		try {
			State = 48;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__16:
			case T__17:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case BOOL:
			case INTEGER:
			case FLOAT:
			case STRING:
			case NULL:
			case IDENTIFIER:
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; statement();
				State = 37; Match(T__0);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39; ifStatement();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40; whileStatement();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 4);
				{
				State = 41; write();
				State = 42; Match(T__0);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 5);
				{
				State = 44; read();
				State = 45; Match(T__0);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 6);
				{
				State = 47; Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 53;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; assignment();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 52; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(PLC_Lab9_exprParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(PLC_Lab9_exprParser.IDENTIFIER, i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; datatype();
			State = 56; Match(IDENTIFIER);
			State = 61;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 57; Match(T__1);
				State = 58; Match(IDENTIFIER);
				}
				}
				State = 63;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(PLC_Lab9_exprParser.IDENTIFIER, 0); }
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_assignment);
		try {
			State = 68;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; Match(IDENTIFIER);
				State = 66; Match(T__2);
				State = 67; assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteContext : ParserRuleContext {
		public FullSTRINGContext[] fullSTRING() {
			return GetRuleContexts<FullSTRINGContext>();
		}
		public FullSTRINGContext fullSTRING(int i) {
			return GetRuleContext<FullSTRINGContext>(i);
		}
		public WriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterWrite(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitWrite(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteContext write() {
		WriteContext _localctx = new WriteContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_write);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(T__3);
			State = 72;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 71; fullSTRING();
				}
				}
				State = 74;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullSTRINGContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(PLC_Lab9_exprParser.STRING, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FullSTRINGContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullSTRING; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterFullSTRING(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitFullSTRING(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullSTRING(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullSTRINGContext fullSTRING() {
		FullSTRINGContext _localctx = new FullSTRINGContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_fullSTRING);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(STRING);
			State = 83;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 77; Match(T__1);
					State = 78; expression(0);
					State = 79; Match(T__1);
					}
					} 
				}
				State = 85;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			State = 90;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 86; Match(T__1);
				State = 87; expression(0);
				}
				}
				State = 92;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(PLC_Lab9_exprParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(PLC_Lab9_exprParser.IDENTIFIER, i);
		}
		public ReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadContext read() {
		ReadContext _localctx = new ReadContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_read);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(T__4);
			State = 94; Match(IDENTIFIER);
			State = 99;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 95; Match(T__1);
				State = 96; Match(IDENTIFIER);
				}
				}
				State = 101;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseStatementContext[] elseStatement() {
			return GetRuleContexts<ElseStatementContext>();
		}
		public ElseStatementContext elseStatement(int i) {
			return GetRuleContext<ElseStatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(T__5);
			{
			State = 103; Match(T__6);
			}
			State = 104; block();
			State = 109;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 105; Match(T__7);
					State = 106; elseStatement();
					}
					} 
				}
				State = 111;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_elseStatement);
		try {
			State = 114;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; block();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113; ifStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(T__8);
			State = 117; expression(0);
			State = 118; Match(T__9);
			State = 119; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public InputContext[] input() {
			return GetRuleContexts<InputContext>();
		}
		public InputContext input(int i) {
			return GetRuleContext<InputContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_block);
		int _la;
		try {
			State = 130;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__0:
			case T__3:
			case T__4:
			case T__5:
			case T__8:
			case T__16:
			case T__17:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case BOOL:
			case INTEGER:
			case FLOAT:
			case STRING:
			case NULL:
			case IDENTIFIER:
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; input();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; Match(T__10);
				State = 124;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 123; input();
					}
					}
					State = 126;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__8) | (1L << T__16) | (1L << T__17) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << BOOL) | (1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << NULL) | (1L << IDENTIFIER) | (1L << INT))) != 0) );
				State = 128; Match(T__11);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrContext : ExpressionContext {
		public ITerminalNode STRING() { return GetToken(PLC_Lab9_exprParser.STRING, 0); }
		public StrContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterStr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitStr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterPar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitPar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolOperContext : ExpressionContext {
		public IToken boolOper;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BoolOperContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterBoolOper(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitBoolOper(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOper(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareContext : ExpressionContext {
		public IToken compare;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompareContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : ExpressionContext {
		public ITerminalNode BOOL() { return GetToken(PLC_Lab9_exprParser.BOOL, 0); }
		public BoolContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MulContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExpressionContext {
		public ITerminalNode FLOAT() { return GetToken(PLC_Lab9_exprParser.FLOAT, 0); }
		public FloatContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(PLC_Lab9_exprParser.INT, 0); }
		public IntContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExprContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterConstantExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitConstantExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExprContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(PLC_Lab9_exprParser.IDENTIFIER, 0); }
		public IdentifierExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterIdentifierExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitIdentifierExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 133; constant();
				}
				break;

			case 2:
				{
				_localctx = new IdentifierExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 134; Match(IDENTIFIER);
				}
				break;

			case 3:
				{
				_localctx = new StrContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 135; Match(STRING);
				}
				break;

			case 4:
				{
				_localctx = new IntContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 136; Match(INT);
				}
				break;

			case 5:
				{
				_localctx = new FloatContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 137; Match(FLOAT);
				}
				break;

			case 6:
				{
				_localctx = new BoolContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 138; Match(BOOL);
				}
				break;

			case 7:
				{
				_localctx = new ParContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 139; Match(T__17);
				State = 140; expression(0);
				State = 141; Match(T__9);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 159;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 157;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
					case 1:
						{
						_localctx = new MulContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 145;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 146;
						((MulContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14))) != 0)) ) {
							((MulContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 147; expression(10);
						}
						break;

					case 2:
						{
						_localctx = new AddContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 148;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 149;
						((AddContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__15 || _la==T__16) ) {
							((AddContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 150; expression(9);
						}
						break;

					case 3:
						{
						_localctx = new CompareContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 151;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 152;
						((CompareContext)_localctx).compare = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21))) != 0)) ) {
							((CompareContext)_localctx).compare = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 153; expression(3);
						}
						break;

					case 4:
						{
						_localctx = new BoolOperContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 154;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 155;
						((BoolOperContext)_localctx).boolOper = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__22 || _la==T__23) ) {
							((BoolOperContext)_localctx).boolOper = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 156; expression(2);
						}
						break;
					}
					} 
				}
				State = 161;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(PLC_Lab9_exprParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(PLC_Lab9_exprParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(PLC_Lab9_exprParser.STRING, 0); }
		public ITerminalNode BOOL() { return GetToken(PLC_Lab9_exprParser.BOOL, 0); }
		public ITerminalNode NULL() { return GetToken(PLC_Lab9_exprParser.NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_constant);
		int _la;
		try {
			State = 173;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__16) {
					{
					State = 162; Match(T__16);
					}
				}

				State = 165; Match(INTEGER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__16) {
					{
					State = 166; Match(T__16);
					}
				}

				State = 169; Match(FLOAT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 170; Match(STRING);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 171; Match(BOOL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 172; Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.EnterDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPLC_Lab9_exprListener typedListener = listener as IPLC_Lab9_exprListener;
			if (typedListener != null) typedListener.ExitDatatype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPLC_Lab9_exprVisitor<TResult> typedVisitor = visitor as IPLC_Lab9_exprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_datatype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 9);

		case 1: return Precpred(_ctx, 8);

		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3&\xB4\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x3\x2\a\x2\"\n\x2\f\x2\xE\x2%\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x33\n\x3\x3\x4\x3\x4"+
		"\x3\x4\x5\x4\x38\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\a\x5>\n\x5\f\x5\xE\x5\x41"+
		"\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6G\n\x6\x3\a\x3\a\x6\aK\n\a\r\a\xE\a"+
		"L\x3\b\x3\b\x3\b\x3\b\x3\b\a\bT\n\b\f\b\xE\bW\v\b\x3\b\x3\b\a\b[\n\b\f"+
		"\b\xE\b^\v\b\x3\t\x3\t\x3\t\x3\t\a\t\x64\n\t\f\t\xE\tg\v\t\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\a\nn\n\n\f\n\xE\nq\v\n\x3\v\x3\v\x5\vu\n\v\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\r\x3\r\x3\r\x6\r\x7F\n\r\r\r\xE\r\x80\x3\r\x3\r\x5\r\x85"+
		"\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x5\xE\x92\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\a\xE\xA0\n\xE\f\xE\xE\xE\xA3\v\xE\x3\xF\x5\xF\xA6\n"+
		"\xF\x3\xF\x3\xF\x5\xF\xAA\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xB0\n\xF"+
		"\x3\x10\x3\x10\x3\x10\x2\x2\x3\x1A\x11\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2\x2\a\x3"+
		"\x2\xF\x11\x3\x2\x12\x13\x3\x2\x15\x18\x3\x2\x19\x1A\x3\x2\x1B\x1E\xC6"+
		"\x2#\x3\x2\x2\x2\x4\x32\x3\x2\x2\x2\x6\x37\x3\x2\x2\x2\b\x39\x3\x2\x2"+
		"\x2\n\x46\x3\x2\x2\x2\fH\x3\x2\x2\x2\xEN\x3\x2\x2\x2\x10_\x3\x2\x2\x2"+
		"\x12h\x3\x2\x2\x2\x14t\x3\x2\x2\x2\x16v\x3\x2\x2\x2\x18\x84\x3\x2\x2\x2"+
		"\x1A\x91\x3\x2\x2\x2\x1C\xAF\x3\x2\x2\x2\x1E\xB1\x3\x2\x2\x2 \"\x5\x4"+
		"\x3\x2! \x3\x2\x2\x2\"%\x3\x2\x2\x2#!\x3\x2\x2\x2#$\x3\x2\x2\x2$\x3\x3"+
		"\x2\x2\x2%#\x3\x2\x2\x2&\'\x5\x6\x4\x2\'(\a\x3\x2\x2(\x33\x3\x2\x2\x2"+
		")\x33\x5\x12\n\x2*\x33\x5\x16\f\x2+,\x5\f\a\x2,-\a\x3\x2\x2-\x33\x3\x2"+
		"\x2\x2./\x5\x10\t\x2/\x30\a\x3\x2\x2\x30\x33\x3\x2\x2\x2\x31\x33\a\x3"+
		"\x2\x2\x32&\x3\x2\x2\x2\x32)\x3\x2\x2\x2\x32*\x3\x2\x2\x2\x32+\x3\x2\x2"+
		"\x2\x32.\x3\x2\x2\x2\x32\x31\x3\x2\x2\x2\x33\x5\x3\x2\x2\x2\x34\x38\x5"+
		"\b\x5\x2\x35\x38\x5\n\x6\x2\x36\x38\x5\x1A\xE\x2\x37\x34\x3\x2\x2\x2\x37"+
		"\x35\x3\x2\x2\x2\x37\x36\x3\x2\x2\x2\x38\a\x3\x2\x2\x2\x39:\x5\x1E\x10"+
		"\x2:?\a$\x2\x2;<\a\x4\x2\x2<>\a$\x2\x2=;\x3\x2\x2\x2>\x41\x3\x2\x2\x2"+
		"?=\x3\x2\x2\x2?@\x3\x2\x2\x2@\t\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x42G\x5\x1A"+
		"\xE\x2\x43\x44\a$\x2\x2\x44\x45\a\x5\x2\x2\x45G\x5\n\x6\x2\x46\x42\x3"+
		"\x2\x2\x2\x46\x43\x3\x2\x2\x2G\v\x3\x2\x2\x2HJ\a\x6\x2\x2IK\x5\xE\b\x2"+
		"JI\x3\x2\x2\x2KL\x3\x2\x2\x2LJ\x3\x2\x2\x2LM\x3\x2\x2\x2M\r\x3\x2\x2\x2"+
		"NU\a\"\x2\x2OP\a\x4\x2\x2PQ\x5\x1A\xE\x2QR\a\x4\x2\x2RT\x3\x2\x2\x2SO"+
		"\x3\x2\x2\x2TW\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2\x2V\\\x3\x2\x2\x2"+
		"WU\x3\x2\x2\x2XY\a\x4\x2\x2Y[\x5\x1A\xE\x2ZX\x3\x2\x2\x2[^\x3\x2\x2\x2"+
		"\\Z\x3\x2\x2\x2\\]\x3\x2\x2\x2]\xF\x3\x2\x2\x2^\\\x3\x2\x2\x2_`\a\a\x2"+
		"\x2`\x65\a$\x2\x2\x61\x62\a\x4\x2\x2\x62\x64\a$\x2\x2\x63\x61\x3\x2\x2"+
		"\x2\x64g\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66\x11\x3"+
		"\x2\x2\x2g\x65\x3\x2\x2\x2hi\a\b\x2\x2ij\a\t\x2\x2jo\x5\x18\r\x2kl\a\n"+
		"\x2\x2ln\x5\x14\v\x2mk\x3\x2\x2\x2nq\x3\x2\x2\x2om\x3\x2\x2\x2op\x3\x2"+
		"\x2\x2p\x13\x3\x2\x2\x2qo\x3\x2\x2\x2ru\x5\x18\r\x2su\x5\x12\n\x2tr\x3"+
		"\x2\x2\x2ts\x3\x2\x2\x2u\x15\x3\x2\x2\x2vw\a\v\x2\x2wx\x5\x1A\xE\x2xy"+
		"\a\f\x2\x2yz\x5\x18\r\x2z\x17\x3\x2\x2\x2{\x85\x5\x4\x3\x2|~\a\r\x2\x2"+
		"}\x7F\x5\x4\x3\x2~}\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x80"+
		"\x81\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2\x82\x83\a\xE\x2\x2\x83\x85\x3\x2"+
		"\x2\x2\x84{\x3\x2\x2\x2\x84|\x3\x2\x2\x2\x85\x19\x3\x2\x2\x2\x86\x87\b"+
		"\xE\x1\x2\x87\x92\x5\x1C\xF\x2\x88\x92\a$\x2\x2\x89\x92\a\"\x2\x2\x8A"+
		"\x92\a&\x2\x2\x8B\x92\a!\x2\x2\x8C\x92\a\x1F\x2\x2\x8D\x8E\a\x14\x2\x2"+
		"\x8E\x8F\x5\x1A\xE\x2\x8F\x90\a\f\x2\x2\x90\x92\x3\x2\x2\x2\x91\x86\x3"+
		"\x2\x2\x2\x91\x88\x3\x2\x2\x2\x91\x89\x3\x2\x2\x2\x91\x8A\x3\x2\x2\x2"+
		"\x91\x8B\x3\x2\x2\x2\x91\x8C\x3\x2\x2\x2\x91\x8D\x3\x2\x2\x2\x92\xA1\x3"+
		"\x2\x2\x2\x93\x94\f\v\x2\x2\x94\x95\t\x2\x2\x2\x95\xA0\x5\x1A\xE\f\x96"+
		"\x97\f\n\x2\x2\x97\x98\t\x3\x2\x2\x98\xA0\x5\x1A\xE\v\x99\x9A\f\x4\x2"+
		"\x2\x9A\x9B\t\x4\x2\x2\x9B\xA0\x5\x1A\xE\x5\x9C\x9D\f\x3\x2\x2\x9D\x9E"+
		"\t\x5\x2\x2\x9E\xA0\x5\x1A\xE\x4\x9F\x93\x3\x2\x2\x2\x9F\x96\x3\x2\x2"+
		"\x2\x9F\x99\x3\x2\x2\x2\x9F\x9C\x3\x2\x2\x2\xA0\xA3\x3\x2\x2\x2\xA1\x9F"+
		"\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\x1B\x3\x2\x2\x2\xA3\xA1\x3\x2\x2"+
		"\x2\xA4\xA6\a\x13\x2\x2\xA5\xA4\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA7"+
		"\x3\x2\x2\x2\xA7\xB0\a \x2\x2\xA8\xAA\a\x13\x2\x2\xA9\xA8\x3\x2\x2\x2"+
		"\xA9\xAA\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xB0\a!\x2\x2\xAC\xB0\a\""+
		"\x2\x2\xAD\xB0\a\x1F\x2\x2\xAE\xB0\a#\x2\x2\xAF\xA5\x3\x2\x2\x2\xAF\xA9"+
		"\x3\x2\x2\x2\xAF\xAC\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF\xAE\x3\x2\x2"+
		"\x2\xB0\x1D\x3\x2\x2\x2\xB1\xB2\t\x6\x2\x2\xB2\x1F\x3\x2\x2\x2\x15#\x32"+
		"\x37?\x46LU\\\x65ot\x80\x84\x91\x9F\xA1\xA5\xA9\xAF";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PLC_Lab9
